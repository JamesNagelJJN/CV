#%%

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

df = pd.read_csv(r'\Users\James\Desktop\Datasets\books.csv')

#%%

print(df.info())

#%% md

num_pages should be int but is an object

#%%

print(df[df['num_pages'].str.contains('[^-0-9\/]+')])

#%% md

Looking at the rows with strings for num_pages shows that
in the average_rating column the incorrect information
has been input. From here the columns have been shifted.
average_rating values becomes the isbn, isbn to isbn 13
and so on. There are only four instances of these books
so removing the rows is fine. The books are also not any
major books that lay heavily as an outliar.

Now num_pages can be converted to a numeric
column

#%%

df = df.drop(df[df['num_pages'].str.contains('[^-0-9\/]+')].index)
df['num_pages'] = pd.to_numeric(df['num_pages'])

#%%

print(df.info())
print(df['isbn'].value_counts())

#%% md

I don't care about isbn and isbn13 as they are
just unique codes to identify a book.
As seen above there are no overlaps with the
unique codes which is good as no two books
should have the same.
isbn13 contains overlaps but due only to the
fact that they are in standard form.

From df.info I can see that the publication_date
column has no consistent date format.

#%%

df = df.drop(['isbn','isbn13'],axis=1)
df['publication_date'] = \
    pd.to_datetime(df['publication_date'],
    errors='coerce').dt.strftime('%d/%m/%Y')

#%%

print(df['publication_date'].value_counts())
print(df.info())

#%% md

average_rating should have type float

#%%

df['average_rating'] = pd.to_numeric(df['average_rating'])

#%%

print(df.info())
print(df['language_code'].value_counts())

#%% md

en-(US,GB,CA) for the column langauge_codes are
United States, Great Briton, Canadian. They are all the
same so i will condense them to all say eng

#%%

language_list = ['en-US','en-GB','en-CA']
df['language_code'] = df['language_code'].apply(lambda x: 'eng' if x in language_list else x)
print(df['language_code'].value_counts())

#%% md

Only look at books with eng language as they will
have different markets/languages

#%%
df = df[df['ratings_count']>0]
df = df[df['language_code']=='eng']
#%%
pub_avg = df.groupby('publisher').agg({'average_rating':'mean','ratings_count':'sum'}).sort_values((['average_rating','ratings_count']),ascending=(False,True))

pub_avg = pub_avg[pub_avg>0]
print(pub_avg.head(35))
#%%


path = r'\Users\James\Desktop/'
df.to_excel(path+'book_use.xlsx')
