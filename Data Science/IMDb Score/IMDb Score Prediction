import pandas as pd
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
import matplotlib.pyplot as plt

#Import Dataset
path = (r'\Users\James\Desktop\Datasets\netflix.csv')
df = pd.read_csv(path)
#I want to work with only complete rows as i want to compare the websites where the votes came from
df = df.dropna()
#Remove all Series from the dataset
df = df[df['Series or Movie'].str.contains('Series')==False].reset_index(drop=True)

#This function normalises a given column of data between 0 and 1
def normalise(column):
    df_max = column.max()
    df_min = column.min()
    column = column.copy()
    for i in range(len(column)):
        column.loc[i] = (column.loc[i] - df_min) / (df_max - df_min)
    return column

#Normalise the score columns using the normalise function
df['IMDb Score'] = normalise(df['IMDb Score'])
df['Rotten Tomatoes Score'] = normalise(df['Rotten Tomatoes Score'])
df['Metacritic Score'] = normalise(df['Metacritic Score'])
df['Hidden Gem Score'] = normalise(df['Hidden Gem Score'])

X = df[['IMDb Score','Rotten Tomatoes Score','Metacritic Score']]
y = df['Hidden Gem Score']
print(X)
model = LinearRegression()

X_train, X_test, y_train, y_test = train_test_split(X,y,train_size=0.2)

model.fit(X_train,y_train)
y_predict = model.predict(X_test)

plt.scatter(y_predict,y_test, alpha=0.4)
plt.show()

def line_of_best_fit(x,y):
    m,b = np.polyfit(x,y,1)
    return m*x + b

IMDb = df['IMDb Score']
Rotten = df['Rotten Tomatoes Score']
Meta = df['Metacritic Score']
Hidden = df['Hidden Gem Score']

l_width = 4.0

plt.scatter(IMDb, Rotten, alpha=0.1)
plt.scatter(IMDb, Meta, alpha=0.1)
plt.scatter(IMDb, Hidden, alpha=0.1)
plt.plot(IMDb,line_of_best_fit(IMDb,Rotten),linewidth=l_width)
plt.plot(IMDb,line_of_best_fit(IMDb,Meta),linewidth=l_width)
plt.plot(IMDb,line_of_best_fit(IMDb,Hidden),linewidth=l_width)
plt.legend(['Rotten','Meta','Hidden'])
plt.show()
